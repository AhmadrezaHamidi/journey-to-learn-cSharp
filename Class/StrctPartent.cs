namespace Class
{
    //in C#, a struct is like a lightweight class; it's a stack-allocated type that can implement interfaces but doesn't support inheritance
    //    در زبان‌های برنامه‌نویسی مانند C#, C++, و Java، دو نوع اصلی از تعریف داده‌ها به نام‌های "ساختار" (Struct) و "کلاس" (Class) وجود دارند. این دو نوع داده در اصول برنامه‌نویسی متفاوتی عمل می‌کنند و دارای تفاوت‌های مهمی هستند:

    //1. کلاس(Class) :
    //   - کلاس‌ها اشیاء(شی‌ها) نمونه‌ای از یک کلاس هستند.مثلاً یک شیء از یک کلاس می‌تواند یک شیء از یک کاربر، یک محصول یا هر موجودیت دیگر باشد.
    //   - کلاس‌ها می‌توانند شامل متدها(توابع) و ویژگی‌ها(متغیرها) باشند.
    //   - شی‌های کلاس به صورت مرجع(Reference Type) در حافظه ذخیره می‌شوند.این به این معناست که اشیاء از یک کلاس به اشتراک گذاشته شده و تغییر در یک شیء بر روی تمام شی‌های مشابه تأثیر می‌گذارد.
    //   - کلاس‌ها پشتیبانی از ارث‌بری (Inheritance) دارند، به این معنا که می‌توانند از کلاس‌های دیگر بهره‌برداری کنند.
    //2. ساختار (Struct):
    //   - ساختارها همچنین اشیاء را نمایان می‌کنند، اما عمدتاً برای نگهداری داده‌ها بدون متدها استفاده می‌شوند.به عبارت دیگر، ساختارها معمولاً به عنوان نگهدارنده‌های داده استفاده می‌شوند.
    //   - ساختارها به صورت مقدار (Value Type) در حافظه ذخیره می‌شوند، بنابراین هر شیء از یک ساختار به صورت مستقل در حافظه قرار دارد.تغییر در یک شیء ساختار، تأثیری بر سایر شی‌ها ندارد.
    //   - ساختارها پشتیبانی از ارث‌بری ندارند و نمی‌توانند از ساختارهای دیگر بهره‌برداری کنند.
    //تصمیم‌گیری بین استفاده از کلاس یا ساختار بستگی به وظایف و نیازهای خاص برنامه شما دارد.
    //اگر نیاز به اشیاء با رفتار و ویژگی‌های پیچیده دارید، احتمالاً از کلاس‌ها استفاده می‌کنید.اما اگر به داده‌های ساده‌تر بدون رفتار پیچیده نیاز دارید، ساختارها مناسبتر هستند.
    //همچنین، استفاده از ساختارها برای داده‌های ساده می‌تواند منجر به بهبود کارایی برنامه شود چرا که ساختارها به صورت مقدار در حافظه ذخیره می‌شوند و بهینه‌ترین برای عملیات سریع خواندن و نوشتن داده‌ها هستند.



    public struct StrctPartent : IntefaceA, IntefaceB
    {
        public StrctPartent()
        {

        }
        public int CalcuLate()
        {
            throw new NotImplementedException();
        }

        public string CalcuLateA()
        {
            throw new NotImplementedException();
        }

        public string CalcuLateB()
        {
            throw new NotImplementedException();
        }
    }


}




